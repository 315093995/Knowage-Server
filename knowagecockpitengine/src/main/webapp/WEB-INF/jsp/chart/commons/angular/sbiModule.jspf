<%-- Knowage, Open Source Business Intelligence suite
Copyright (C) 2016 Engineering Ingegneria Informatica S.p.A.

Knowage is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

Knowage is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
--%>

<script>

	var sbiM = angular.module('sbiModule',["toastr",'ngSanitize']);
	
	sbiM.factory('sbiModule_config',function(){
		return {
			protocol: '<%= request.getScheme()%>' ,
			host: '<%= request.getServerName()%>',
		    port: '<%= request.getServerPort()%>',
			contextName: '/<%= request.getContextPath().startsWith("/")||request.getContextPath().startsWith("\\")?request.getContextPath().substring(1): request.getContextPath()%>',
	    	externalBasePath:"<%=request.getParameter(SpagoBIConstants.SBI_CONTEXT)%>"		
		};
	});
	
	sbiM.service('sbiModule_logger',function(){
		this.exec=true;
		this.log = function(val1,val2,val3){
			if(this.exec){
			console.log("[LOG] ",val1,(val2 || ""),(val3|| ""));
			}
		};
		this.disableConsole = function(){
			return console.log = function(){};
		}
		
		this.clearConsole = function() {
			console.clear();
		}
		this.trace = function(val1,val2,val3){
			if(this.exec){
			console.log("[TRACE] ",val1,(val2 || ""),(val3|| ""));
			}
		};
		
	});		
	
	sbiM.directive('loading',   ['$http' ,function ($http)
	    {
	        return {
	            restrict: 'A',
	            
	            link: function (scope, elm, attrs)
	            {
	                scope.isLoading = function () {
	                    return $http.pendingRequests.length > 0;
	                };
	                
	                scope.showLoadingMask = true;
	
	                scope.$watch(scope.isLoading, function (v)
	                {
	                    if(v){
	                    	scope.showEl = true;
	                    }else{
	                    	scope.showEl = false;
	                    	scope.showLoadingMask = true;
	                    }
	                });
	            }
	        };
	
	    }]);
	
	sbiM.directive('restLoading',   ['$http' ,function ($http)
	                              	{
	                              	    return {
	                              	        template:"<div loading layout-fill style='position:fixed;z-index: 500;background:rgba(0,0,0, 0.3);'>"+
	                              	    	"<md-progress-circular  md-mode='indeterminate' style='top:50%;left:50%' ></md-progress-circular></div>",
	                              	        link: function (scope, elm, attrs)
	                              	        {
	                              	            scope.$watch(function () {
	                              	                return $http.pendingRequests.length > 0;
	                              	            }, function (v)
	                              	            {
	                              	                if(v){
	                              	               	 elm.css("display","block");
	                              	                }else{
	                              	               	 elm.css("display","none");
	                              	                }
	                              	            });
	                              	        }
	                              	    };
	                              	}]);
	
	
	sbiM.service('sbiModule_messaging',function(sbiModule_restServices,$mdToast){
		
		this.showErrorMessage = function(msg,title){
//	 		toastr.error(msg,title, {
//	 			  closeButton: true
//	 		});
			sbiModule_restServices.errorHandler(msg,title);
		};
		
		
		
		this.showWarningMessage = function(msg,title,hideTimeout){
//	 		toastr.warning(msg,title, {
//	 			  closeButton: true
//	 		});

			var timeout = 3000;

			if (hideTimeout && typeof hideTimeout == "number") {
				timeout = hideTimeout;
			}

			return	$mdToast.show(
						$mdToast
						.simple()
						.content(msg)
						.position('top')
						.action('OK')
						.highlightAction(false)
						.hideDelay(timeout)
					);
			
		};
		this.showInfoMessage = function(msg,title,hideTimeout){
//	 		toastr.info(msg,title, {
//	 			  closeButton: true
//	 		});

			var timeout = 3000;

			if (hideTimeout && typeof hideTimeout == "number") {
				timeout = hideTimeout;
			}

			return	$mdToast.show(
						$mdToast
						.simple()
						.content(msg)
						.position('top')
						.action('OK')
						.highlightAction(false)
						.hideDelay(timeout)
					);
			
		};
		
		// hideTimeout - configurable timeout for hiding of the mdToast. (added by: danristo)
		this.showSuccessMessage = function(msg,title,hideTimeout){
//	 		toastr.success(msg,title, {
//	 			  closeButton: true
//	 			});
			
			var timeout = 3000;

			if (hideTimeout && typeof hideTimeout == "number") {
				timeout = hideTimeout;
			}

			return	$mdToast.show(
						$mdToast
						.simple()
						.content(msg)
						.position('top')
						.action('OK')
						.highlightAction(false)
						.hideDelay(timeout) // changed by: danristo (previous value: 60000)
					);
			
		};
			
	});
	
	sbiM.service('sbiModule_translate', function() {
		this.addMessageFile = function(file){
			messageResource.load([file,"messages"], function(){});
		};
		
		this.load = function(key,sourceFile) {
			var sf= sourceFile == undefined? 'messages' : sourceFile;
			return messageResource.get(key, sf);
		};
	});
	
	sbiM.service('sbiModule_restServices', function($http, $q, sbiModule_config,sbiModule_logger,sbiModule_translate,$mdPanel) {
		
		var alteredContextPath=null;
	
		this.alterContextPath=function(cpat){		
			alteredContextPath=cpat;
		}
	
		function getBaseUrl(endP_path) {		
			var burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path  : alteredContextPath+ "/restful-services/" + endP_path 
			alteredContextPath=null;
			return burl ;
		};
		
		this.getCompleteBaseUrl = function(endP_path) {		
			var burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path  : alteredContextPath+ "/restful-services/" + endP_path 
			alteredContextPath=null;
			burl = sbiModule_config.protocol+"://"+sbiModule_config.host+":"+sbiModule_config.port+burl;
			return burl ;
		};	
		
		this.get = function(endP_path, req_Path, item, conf) {
			(item == undefined || item==null) ? 
					item = "" : 
						item = "?" + encodeURIComponent(item)
								.replace(/'/g,"%27")
								.replace(/"/g,"%22")
								.replace(/%3D/g,"=")
								.replace(/%26/g,"&");
			sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
			return $http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
		};
	
		this.remove = function(endP_path, req_Path, item, conf) {
			item == undefined ? item = "" : item = "?" + item;
			sbiModule_logger.trace("REMOVE: "+endP_path+"/"+req_Path + "" + item,conf);
			return $http.post(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
		};
	
		this.post = function(endP_path, req_Path, item, conf) {
			sbiModule_logger.trace("POST: "+endP_path+"/"+ req_Path,item,conf);
			return $http.post(getBaseUrl(endP_path) + "" + req_Path, item, conf);
		};
		
		this.put = function(endP_path, req_Path, item, conf) {
			sbiModule_logger.trace("PUT: "+endP_path+"/"+req_Path,item,conf);
			return $http.put(getBaseUrl(endP_path) + "" + req_Path, item, conf);
		};
		
		this.delete = function(endP_path, req_Path, item, conf) {
			(item == undefined || item==null) ? item = "" : item = "?" + encodeURIComponent(item).replace(/'/g,"%27").replace(/"/g,"%22").replace(/%3D/g,"=").replace(/%26/g,"&");
			sbiModule_logger.trace("PUT:" +endP_path+"/"+req_Path+ "" + item,conf);
			return $http.delete(getBaseUrl(endP_path) + "" + req_Path, conf);
		};
			
		/*
		NEW METHODS
		*/
		
		var genericErrorHandling = function(data, status, headers, config, deferred) {
	
	  		deferred.reject(data, status, headers, config);
		};
		
		var handleResponse = function(data, status, headers, config, deferred) {
			console.log(data);
			if(data.data != null){
				if ( data.data.hasOwnProperty("errors")) {
					
					genericErrorHandling(data, status, headers, config, deferred);
				} else {
					deferred.resolve(data, status, headers, config);
				}	
			}else{
				if ( data.status == 201) {
					deferred.resolve(data, status, headers, config);
					
				} else {
					genericErrorHandling(data, status, headers, config, deferred);
				}	
				
			}
			/////////////////////////////////////
		};
		
		
	
		// SAMPLE METHOD, this will be the implementation
		this.promiseGet = function(endP_path, req_Path, item, conf) {
			var deferred = $q.defer();
			
			// Required for passing JSON on a GET request
			if (item == undefined || item==null) {
				item = "";
			}else {
				item = "?" + 
					encodeURIComponent(item)
					.replace(/'/g,"%27")
					.replace(/"/g,"%22")
					.replace(/%3D/g,"=")
					.replace(/%26/g,"&");
			}
			
			sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
			
			deferred.notify('About to call async function');
	
			$http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf)
				.then(
						function successCallback(data, status, headers, config) {
							handleResponse(data, status, headers, config, deferred);
					  	}, 
					  	function errorCallback(data, status, headers, config) {
					  		genericErrorHandling(data, status, headers, config, deferred);
					  	}
				);
	
			return deferred.promise;
		};
		
		this.promisePost = function(endP_path, req_Path, item, conf) {
			var deferred = $q.defer();
			
			sbiModule_logger.trace("POST: " +endP_path+"/"+ req_Path + "" + item, conf);
			
			deferred.notify('About to call async function');
	
			$http.post(getBaseUrl(endP_path) + "" + req_Path , item, conf)
				.then(
						function successCallback(data, status, headers, config) {
							handleResponse(data, status, headers, config, deferred);
					  	}, 
					  	function errorCallback(data, status, headers, config) {
					  		genericErrorHandling(data, status, headers, config, deferred);
					  	}
				);
	
			return deferred.promise;
		};
		
		this.promisePut = function(endP_path, req_Path, item, conf) {
			var deferred = $q.defer();
			
			sbiModule_logger.trace("PUT: " +endP_path+"/"+ req_Path + "" + item, conf);
			
			deferred.notify('About to call async function');
	
			$http.put(getBaseUrl(endP_path) + "" + req_Path , item, conf)
				.then(
						function successCallback(data, status, headers, config) {
							handleResponse(data, status, headers, config, deferred);
					  	}, 
					  	function errorCallback(data, status, headers, config) {
					  		genericErrorHandling(data, status, headers, config, deferred);
					  	}
				);
	
			return deferred.promise;
		};
		
		this.promiseDelete = function(endP_path, req_Path, item, conf) {
			var deferred = $q.defer();
			
			sbiModule_logger.trace("DELETE: " +endP_path+"/"+ req_Path + "" + item, conf);
			
			deferred.notify('About to call async function');
	
			$http.delete(getBaseUrl(endP_path) + "" + req_Path, conf)
				.then(
						function successCallback(data, status, headers, config) {
							handleResponse(data, status, headers, config, deferred);
					  	}, 
					  	function errorCallback(data, status, headers, config) {
					  		genericErrorHandling(data, status, headers, config, deferred);
					  	}
				);
	
			return deferred.promise;
		};
		
		this.errorHandler=function(text,title){
			var deferred = $q.defer();
			var titleFin= title ? sbiModule_translate.load(title) : "";
			var textFin=text;
			
			if(angular.isObject(text)){
				if(text.hasOwnProperty("errors") || text.hasOwnProperty("warnings")){
					var messages = text.errors || text.warnings;
					textFin="";
					for(var i=0;i<messages.length;i++){
						textFin+=sbiModule_translate.load(messages[i].message)+" <br> ";
					}
				}else{
					textFin=sbiModule_translate.load(JSON.stringify(text));
				}
			}else{
				textFin=sbiModule_translate.load(text);
			}
			
			
			  var config = {
					    attachTo: angular.element(document.body),
					    locals :{title:titleFin,text:textFin},
					    controller: function($scope,mdPanelRef,sbiModule_translate,title,text){
					    	$scope.title=title;
					    	$scope.text=text;
					    	$scope.ok=sbiModule_translate.load("sbi.general.ok");
					    	
					    	$scope.closeDialog=function(){
					    		mdPanelRef.close();
					    	}
					    },
					    disableParentScroll: true,
					    template: '<md-card>'+
					    	 		'<md-card-title style="   min-width: 300px; max-height: 400px;max-width: 600px; overflow: auto;">'+
				          			'	<md-card-title-text>'+
				            		'		<span class="md-headline">{{title}}</span>'+
				            		'		<span class="md-subhead"  ng-bind-html="text"> </span>'+
				          			'	</md-card-title-text>'+
				          			'</md-card-title>'+
				          			'<md-card-actions layout="row" layout-align="end center">'+
				                   	 '<md-button ng-click="closeDialog()">{{ok}}</md-button>'+
				                  '</md-card-actions>'+
				          		'</md-card>',
					    hasBackdrop: true,
					    position: $mdPanel.newPanelPosition().absolute().center(),
					    trapFocus: true,
					    zIndex: 150,
					    clickOutsideToClose: true,
					    escapeToClose: true,
					    focusOnOpen: true,
					    onRemoving :function(){
					      deferred.resolve();
					    }
					  };
			  
			$mdPanel.open(config);
			return deferred.promise;
			
		}
		
	  });

</script>